#!/usr/bin/env python
#
# $Id: allergy,v 1.18 2004-06-15 20:34:40 grahn Exp $
# $Name:  $
#
# Copyright (c) 2001, 2004 Jörgen Grahn <jgrahn@algonet.se>
# All rights reserved.
#
# allergy - build thumbnails and html code to present
# a number of photos as an 'album' or 'photo gallery'.
# 
import Image
import glob
import re
import os.path
import os
import sys

def make(a, b):
    """Return true iff file 'a' needs to be regenerated
    from 'b', i.e. if it doesn't exist or is older than 'b'.
    May raise os.error, aka OSError."""
    try:
        am = os.path.getmtime(a)
    except os.error:
        return 1
    bm = os.path.getmtime(b)
    return am <= bm

def thumbname(path):
    """Return the thumbnail file name corresponding
    to an image name, i.e. prepend an underscore and
    append a .jpg suffix (killing any existing suffix)."""
    head, tail = os.path.split(path)
    tail, ext = os.path.splitext(tail)
    tail = '_%s.jpg' % tail
    return os.path.join(head, tail)

def gridentry(href, thumbnail, text=None):
    """Format an object (probably an image) as a grid item,
    with an existing thumbnail image and describing text."""
    acc = []
    acc.append('<td><a href="%s">' % href)
    html.append('  <img src="%s"' % thumbnail)
    html.append('      alt="[%s]"' % thumbnail)
    if text:
        html.append('  title="%s"' % text)
    html.append('  width="%d" height="%d"></a>' % Image.open(thumbnail).size)
    return '\n'.join(acc)

def listentry(href, thumbnail, text=None):
    """Format an object (probably an image) as a list item,
    with an existing thumbnail image and describing text."""
    acc = []
    acc.append('<p><a href="%s">' % href)
    html.append('  <img src="%s"' % thumbnail)
    html.append('      alt="[%s]"' % thumbnail)
    html.append('  width="%d" height="%d"></a>' % Image.open(thumbnail).size)
    if text:
        html.append(text)
    return '\n'.join(acc)

class Gallery:
    """Main parser and gallery generator. After fed the lines
    contained within a begin/end{gallery}, do() generates
    thumbnails and corresponding HTML."""
    gridre = re.compile(r'\\grid{\s*(\d+)\s*,\s*n}')
    listre = re.compile(r'\\list{}')
    classre = re.compile(r'\\class{\s*(.+?)\s*}')
    boundedre = re.compile(r'\\bounded{(\d+),(\d+)}')
    qualityre = re.compile(r'\\quality{(\d+)}')
    commentre = re.compile(r'\s*(#.+)?$')
    annotre = re.compile(r'(.+?)\s*:\s*(.+)')
    def __init__(self, thumbnailing=1):
        self.thumbnailing = thumbnailing
        self.verbose = 1
        self.columns = 4
        self.cls = None
        self.quality = 30
        self.bbox = (140, 100)
        self.images = []
    def add(self, line):
        "Parse a source line of the gallery definition"
        m = self.commentre.match(line)
        if m: return
        m = self.gridre.match(line)
        if m:
            self.columns = int(m.group(1))
            return
        m = self.listre.match(line)
        if m:
            self.columns = None
            return
        m = self.classre.match(line)
        if m:
            self.cls = m.group(1)
            return
        m = self.boundedre.match(line)
        if m:
            self.bbox = tuple(map(int, m.groups()))
            return
        m = self.qualityre.match(line)
        if m:
            self.quality = int(m.group(1))
            return
        m = self.annotre.match(line)
        if m:
            (pat, caption) = m.groups()
            self.images.append((pat, [caption]))
            return
        if not line[0].isspace():
            self.images.append((line.strip(), []))
        else:
            self.images[-1][1].append(line)
            return
    def do(self):
        """Execute the gallery, performing thumbnailing as
        appropriate. Returns a string containing the HTML for this
        gallery."""
        images = []
        html = []
        for pat, caption in self.images:
            pats = glob.glob(pat)
            pats.sort()
            for image in pats:
                if image[0] != '_' and not image in images:
                    images.append(image)
        if self.cls:
            html.append('<table class="%s">' % self.cls)
        else:
            html.append('<table>')
        n = 0
        for f in images:
            tf = thumbname(f)
            if make(tf, f) and self.thumbnailing:
                i = Image.open(f)
                i.thumbnail(self.bbox)
                if self.verbose:
                    print >>sys.stderr, '%s, thumbnailing' % f
                i.save(thumbname(f), 'JPEG', quality=self.quality)
            else:
                if self.verbose:
                    print >>sys.stderr, f
                i = Image.open(tf)
            if self.columns and n % self.columns == 0:
                html.append('<tr>')
            html.append('<td><a href="%s">' % f)
            html.append('  <img src="%s"' % tf)
            html.append('  alt="[%s]"' % f)
            html.append('  width="%d" height="%d"></a>' % i.size)
            n += 1
        html.append('</table>')
        return '\n'.join(html)


if __name__ == "__main__":
    import getopt

    usage = 'usage: allergy [-k] file'

    try:
        opts, files = getopt.getopt(sys.argv[1:], '-k')
    except getopt.GetoptError, s:
        print s
        print usage
        sys.exit(1)
    if not len(files)==1:
        print usage
        sys.exit(1)
    thumbnailing = len(opts)==0
    file = files[0]

    ingallery = 0

    f = open(file, 'rb')
    for line in f.xreadlines():
        if ingallery:
            if line.count(r'\end{gallery}'):
                print gallery.do()
                ingallery = 0
            else:
                gallery.add(line)
        else:
            if line.count(r'\begin{gallery}'):
                ingallery = 1
                gallery = Gallery(thumbnailing)
            else:
                print line[:-1]
