#!/usr/bin/env python
# -*- coding: iso-8859-1 -*-
#
# $Id: allergy,v 1.24 2004-06-23 19:37:29 grahn Exp $
# $Name:  $
#
# Copyright (c) 2001, 2004 Jörgen Grahn <jgrahn@algonet.se>
# All rights reserved.
#
# allergy - build thumbnails and html code to present
# a number of photos as an 'album' or 'photo gallery'.
# 
import Image
import glob
import re
import os.path
import os
import sys

class Any:
    "The wildcard object."
    def __cmp__(self, other): return 0
ANY = Any()

class Feedback:
    def __init__(self, verbosity=2):
        if verbosity==0:
            self.__call__ = self.nop
        elif verbosity==1:
            self.__call__ = self.dot
        else:
            self.__call__ = self.string
        self.final_nl = 0
    def close(self):
        if self.final_nl:
            sys.stderr.write('\n')
            sys.stderr.flush()
    def string(self, s):
        print >>sys.stderr, s
        sys.stderr.flush()
    def dot(self, s):
        sys.stderr.write('.')
        sys.stderr.flush()
        self.final_nl = 1
    def nop(self, s):
        pass

def make(a, b):
    """Return true iff file 'a' needs to be regenerated
    from 'b', i.e. if it doesn't exist or is older than 'b'.
    May raise os.error, aka OSError."""
    try:
        am = os.path.getmtime(a)
    except os.error:
        return 1
    bm = os.path.getmtime(b)
    return am <= bm

def thumbname(path):
    """Return the thumbnail file name corresponding
    to an image name, i.e. prepend an underscore and
    append a .jpg suffix (killing any existing suffix)."""
    head, tail = os.path.split(path)
    tail, ext = os.path.splitext(tail)
    tail = '_%s.jpg' % tail
    return os.path.join(head, tail)

def gridentry(href, thumbnail, caption):
    """Format an object (probably an image) as a grid item,
    with an existing thumbnail image and describing text."""
    html = []
    html.append('<td><a href="%s">' % href)
    html.append('  <img src="%s"' % thumbnail)
    html.append('      alt="[%s]"' % thumbnail)
    if caption:
        html.append('  title="%s"' % caption)
    html.append('  width="%d" height="%d"></a>' % Image.open(thumbnail).size)
    return '\n'.join(html)

def listentry(href, thumbnail, caption):
    """Format an object (probably an image) as a list item,
    with an existing thumbnail image and describing text."""
    html = []
    html.append('<p><a href="%s">' % href)
    html.append('  <img src="%s"' % thumbnail)
    html.append('      alt="[%s]"' % thumbnail)
    html.append('  width="%d" height="%d"></a>' % Image.open(thumbnail).size)
    if caption:
        html.append(caption)
    html.append('<br>')
    return '\n'.join(html)

class Gallery:
    """Main parser and gallery generator. After fed the lines
    contained within a begin/end{gallery}, do() generates
    thumbnails and corresponding HTML."""
    gridre = re.compile(r'\\grid{\s*(\d+)\s*,\s*n}')
    listre = re.compile(r'\\list{}')
    classre = re.compile(r'\\class{\s*(.+?)\s*}')
    boundedre = re.compile(r'\\bounded{(\d+),(\d+)}')
    qualityre = re.compile(r'\\quality{(\d+)}')
    commentre = re.compile(r'\s*(#.+)?$')
    annotre = re.compile(r'(.+?)\s*:\s*(.+)')
    def __init__(self, feedback, thumbnailing=1):
        self.thumbnailing = thumbnailing
        self.feedback = feedback
        self.columns = 4
        self.formatter = gridentry
        self.cls = ''
        self.quality = 30
        self.bbox = (140, 100)
        self.images = []
    def add(self, line):
        "Parse a source line of the gallery definition"
        m = self.commentre.match(line)
        if m: return
        m = self.gridre.match(line)
        if m:
            self.columns = int(m.group(1))
            self.formatter = gridentry
            return
        m = self.listre.match(line)
        if m:
            self.columns = None
            self.formatter = listentry
            return
        m = self.classre.match(line)
        if m:
            self.cls = ' class="%s"' % m.group(1)
            return
        m = self.boundedre.match(line)
        if m:
            self.bbox = tuple(map(int, m.groups()))
            return
        m = self.qualityre.match(line)
        if m:
            self.quality = int(m.group(1))
            return
        m = self.annotre.match(line)
        if m:
            (pat, caption) = m.groups()
            self.images.append((pat, [caption]))
            return
        if not line[0].isspace():
            self.images.append((line.strip(), []))
        else:
            self.images[-1][1].append(line)
            return
    def do(self):
        """Execute the gallery, performing thumbnailing as
        appropriate. Returns a string containing the HTML for this
        gallery."""
        images = []
        html = []
        for pat, caption in self.images:
            pats = glob.glob(pat)
            pats.sort()
            for image in pats:
                if image[0] != '_' and not (image, ANY) in images:
                    images.append((image, ' '.join(caption)))
        if self.columns:
            html.append('<table%s>' % self.cls)
        else:
            html.append('<div%s>' % self.cls)
        n = 0
        for f, caption in images:
            tf = thumbname(f)
            if make(tf, f) and self.thumbnailing:
                i = Image.open(f)
                i.thumbnail(self.bbox)
                if i.mode=='P':
                    i = i.convert('RGB')
                self.feedback('%s, thumbnailing' % f)
                i.save(thumbname(f), 'JPEG', quality=self.quality)
            else:
                self.feedback(f)
                i = Image.open(tf)
            if self.columns and n % self.columns == 0:
                html.append('<tr>')
            html.append(self.formatter(f, tf, caption))
            n += 1
        if self.columns:
            html.append('</table>')
        else:
            html.append('</div>')
        self.feedback.close()
        return '\n'.join(html)


if __name__ == "__main__":
    import getopt
    import fileinput

    usage = 'usage: allergy [-k] [-v | -V] file'

    try:
        opts, files = getopt.getopt(sys.argv[1:], 'kvV')
    except getopt.GetoptError, s:
        print >>sys.stderr, s
        print >>sys.stderr, usage
        sys.exit(1)
    thumbnailing = 1
    verbosity = 0
    for option, value in opts:
        if option == '-k': thumbnailing = 0
        if option == '-v': verbosity = 2
        if option == '-V': verbosity = 1

    ingallery = 0

    for line in fileinput.input(files):
        if ingallery:
            if line.count(r'\end{gallery}'):
                print gallery.do()
                ingallery = 0
            else:
                gallery.add(line)
        else:
            if line.count(r'\begin{gallery}'):
                ingallery = 1
                gallery = Gallery(Feedback(verbosity), thumbnailing)
            else:
                print line[:-1]
