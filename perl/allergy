#!/usr/bin/env python
#
# $Id: allergy,v 1.15 2004-05-31 15:12:24 grahn Exp $
# $Name:  $
#
# Copyright (c) 2001, 2004 Jörgen Grahn <jgrahn@algonet.se>
# All rights reserved.
#
# allergy - build thumbnails and html code to present
# a number of photos as an 'album' or 'photo gallery'.
# 
import Image
import glob
import re
import os.path
import sys

def dimensions(file):
    """Return (width, height) of the image in 'file'
    -- or throw IOError."""
    return Image.open(file).size

def make(a, b):
    """Return true iff file 'a' needs to be regenerated
    from 'b', i.e. if it doesn't exist or is older than 'b'."""
    return 1

def thumbnail(img, bbox=(140,100)):
    """Return a copy of 'img', scaled down to fit
    inside 'bbox'."""
    pass

def thumbname(path):
    """Return the thumbnail file name corresponding
    to an image name, i.e. prepend an underscore and
    append a .jpg suffix."""
    head, tail = os.path.split(path)
    tail = '_%s.jpg' % tail
    return os.path.join(head, tail)

class Gallery:
    """Main parser and gallery generator. After fed the lines
    contained within a begin/end{gallery}, do() generates
    thumbnails and corresponding HTML."""
    gridre = re.compile(r'\\grid{\s*(\d+)\s*,\s*n}')
    listre = re.compile(r'\\list{}')
    classre = re.compile(r'\\class{\s*(.+?)\s*}')
    boundedre = re.compile(r'\\bounded{(\d+),(\d+)}')
    qualityre = re.compile(r'\\quality{(\d+)}')
    commentre = re.compile(r'\s*(#.+)?$')
    annotre = re.compile(r'(.+?)\s*:\s*(.+)')
    def __init__(self, thumbnailing=1):
        self.thumbnailing = thumbnailing
        self.columns = 4
        self.cls = None
        self.quality = 30
        self.bbox = (140, 100)
        self.images = []
    def add(self, line):
        m = self.commentre.match(line)
        if m: return
        m = self.gridre.match(line)
        if m:
            self.columns = int(m.group(1))
            return
        m = self.listre.match(line)
        if m:
            self.columns = None
            return
        m = self.classre.match(line)
        if m:
            self.cls = m.group(1)
            return
        m = self.boundedre.match(line)
        if m:
            self.bbox = tuple(map(int, m.groups()))
            return
        m = self.qualityre.match(line)
        if m:
            self.quality = int(m.group(1))
            return
        m = self.annotre.match(line)
        if m:
            (pat, caption) = m.groups()
            self.images.append((pat, [caption]))
            return
        if not line[0].isspace():
            self.images.append((line.strip(), []))
        else:
            self.images[-1][1].append(line)
            return
    def do(self):
        images = []
        for pat, caption in self.images:
            for image in glob.glob(pat):
                if image[0] != '_' and not image in images:
                    images.append(image)
        for f in images:
            tf = thumbname(f)
            if make(tf, f):
                i = Image.open(f)
                i.thumbnail(self.bbox)
                print >>sys.stderr, '%s -> %s bbox %s' % (f, i.size, self.bbox)
                i.save(thumbname(f), 'JPEG', quality=self.quality)
            else:
                i = Image.open(tf)
        return '\n'.join(images)


if __name__ == "__main__":
    import getopt

    usage = 'usage: allergy [-k] file'

    try:
        opts, files = getopt.getopt(sys.argv[1:], '-k')
    except getopt.GetoptError, s:
        print s
        print usage
        sys.exit(1)
    if not len(files)==1:
        print usage
        sys.exit(1)
    thumbnailing = len(opts)==0
    file = files[0]

    ingallery = 0

    f = open(file, 'rb')
    for line in f.xreadlines():
        if ingallery:
            if line.count(r'\end{gallery}'):
                print gallery.do()
                ingallery = 0
            else:
                gallery.add(line)
        else:
            if line.count(r'\begin{gallery}'):
                ingallery = 1
                gallery = Gallery()
            else:
                print line[:-1]
